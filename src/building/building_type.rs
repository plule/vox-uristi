use crate::direction::DirectionFlat;
use dfhack_remote::BuildingInstance;
use num_enum::FromPrimitive;

#[derive(Debug, Eq, PartialEq, Clone)]
pub enum BuildingType {
    Chair,
    Bed,
    Table,
    Coffin,
    FarmPlot,
    Furnace(FurnaceType),
    Door,
    Floodgate,
    Box,
    WeaponRack,
    ArmorStand,
    WindowGlass,
    WindowGem,
    Well,
    Cabinet,
    Statue,
    Workshop(WorkshopType),
    Bridge { direction: Option<DirectionFlat> },
    RoadDirt,
    RoadPaved,
    SiegeEngine { subtype: i32 },
    Trap { subtype: i32 },
    AnimalTrap,
    Support,
    ArcheryTarget { direction: DirectionFlat },
    Chain,
    Cage,
    Stockpile,
    Civzone { subtype: i32 },
    Weapon,
    Wagon,
    ScrewPump,
    Construction { subtype: i32 },
    Hatch,
    GrateWall,
    GrateFloor,
    BarsVertical,
    BarsFloor,
    GearAssembly,
    AxleHorizontal,
    AxleVertical,
    WaterWheel,
    Windmill,
    TractionBench,
    Slab,
    Nest,
    NestBox,
    Hive,
    Rollers,
    Instrument,
    Bookcase,
    DisplayFurniture,
    OfferingPlace,
    Unknown,
}

#[derive(Debug, Eq, PartialEq, Clone)]
pub enum WorkshopType {
    Generic,
    Carpenter,
    Farmers,
    Masons,
    Craftdwarfs,
    Jewelers,
    MetalsmithsForge,
    MagmaForge,
    Bowyers,
    Mechanics,
    Siege,
    Butchers,
    Leatherworks,
    Tanners,
    Clothiers,
    Fishery,
    Still,
    Loom,
    Quern,
    Kennels,
    Kitchen,
    Ashery,
    Dyers,
    Millstone,
    Custom,
    SoapMaker,
    ScrewPress,
    Tool,
}

#[derive(Debug, Eq, PartialEq, Clone, FromPrimitive)]
#[repr(i32)]
pub enum FurnaceType {
    #[default]
    Generic = -1,
    WoodFurnace = 0,
    Smelter = 1,
    GlassFurnace = 2,
    Kiln = 3,
    MagmaSmelter = 4,
    MagmaGlassFurnace = 5,
    MagmaKiln = 6,
    Custom = 7,
}

impl From<(i32, i32)> for WorkshopType {
    fn from((subtype, custom): (i32, i32)) -> Self {
        match (subtype, custom) {
            (0, _) => Self::Carpenter,
            (1, _) => Self::Farmers,
            (2, _) => Self::Masons,
            (3, _) => Self::Craftdwarfs,
            (4, _) => Self::Jewelers,
            (5, _) => Self::MetalsmithsForge,
            (6, _) => Self::MagmaForge,
            (7, _) => Self::Bowyers,
            (8, _) => Self::Mechanics,
            (9, _) => Self::Siege,
            (10, _) => Self::Butchers,
            (11, _) => Self::Leatherworks,
            (12, _) => Self::Tanners,
            (13, _) => Self::Clothiers,
            (14, _) => Self::Fishery,
            (15, _) => Self::Still,
            (16, _) => Self::Loom,
            (17, _) => Self::Quern,
            (18, _) => Self::Kennels,
            (19, _) => Self::Kitchen,
            (20, _) => Self::Ashery,
            (21, _) => Self::Dyers,
            (22, _) => Self::Millstone,
            (23, 0) => Self::SoapMaker,
            (23, 1) => Self::ScrewPress,
            (23, _) => Self::Custom,
            (24, _) => Self::Tool,
            _ => Self::Generic,
        }
    }
}

impl BuildingType {
    pub fn from_df(instance: &BuildingInstance) -> BuildingType {
        if instance.building_type.is_none() {
            return BuildingType::Unknown;
        }

        let building_type = instance.building_type.get_or_default();
        match building_type.building_type() {
            0 => BuildingType::Chair,
            1 => BuildingType::Bed,
            2 => BuildingType::Table,
            3 => BuildingType::Coffin,
            4 => BuildingType::FarmPlot,
            5 => BuildingType::Furnace(FurnaceType::from(building_type.building_subtype())),
            8 => BuildingType::Door,
            9 => BuildingType::Floodgate,
            10 => BuildingType::Box,
            11 => BuildingType::WeaponRack,
            12 => BuildingType::ArmorStand,
            13 => BuildingType::Workshop(WorkshopType::from((
                building_type.building_subtype(),
                building_type.building_custom(),
            ))),
            14 => BuildingType::Cabinet,
            15 => BuildingType::Statue,
            16 => BuildingType::WindowGlass,
            17 => BuildingType::WindowGem,
            18 => BuildingType::Well,
            19 => BuildingType::Bridge {
                direction: DirectionFlat::maybe_from_df(&instance.direction()),
            },
            20 => BuildingType::RoadDirt,
            21 => BuildingType::RoadPaved,
            22 => BuildingType::SiegeEngine {
                subtype: building_type.building_subtype(),
            },
            23 => BuildingType::Trap {
                subtype: building_type.building_subtype(),
            },
            24 => BuildingType::AnimalTrap,
            25 => BuildingType::Support,
            26 => BuildingType::ArcheryTarget {
                direction: DirectionFlat::maybe_from_df(&instance.direction())
                    .unwrap_or(DirectionFlat::North),
            },
            27 => BuildingType::Chain,
            28 => BuildingType::Cage,
            29 => BuildingType::Stockpile,
            30 => BuildingType::Civzone {
                subtype: building_type.building_subtype(),
            },
            31 => BuildingType::Weapon,
            32 => BuildingType::Wagon,
            33 => BuildingType::ScrewPump,
            34 => BuildingType::Construction {
                subtype: building_type.building_subtype(),
            },
            35 => BuildingType::Hatch,
            36 => BuildingType::GrateWall,
            37 => BuildingType::GrateFloor,
            38 => BuildingType::BarsVertical,
            39 => BuildingType::BarsFloor,
            40 => BuildingType::GearAssembly,
            41 => BuildingType::AxleHorizontal,
            42 => BuildingType::AxleVertical,
            43 => BuildingType::WaterWheel,
            44 => BuildingType::Windmill,
            45 => BuildingType::TractionBench,
            46 => BuildingType::Slab,
            47 => BuildingType::Nest,
            48 => BuildingType::NestBox,
            49 => BuildingType::Hive,
            50 => BuildingType::Rollers,
            51 => BuildingType::Instrument,
            52 => BuildingType::Bookcase,
            53 => BuildingType::DisplayFurniture,
            54 => BuildingType::OfferingPlace,
            _ => BuildingType::Unknown,
        }
    }
}
